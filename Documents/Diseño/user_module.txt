entity: 
	- user
attributes:
	- username
	- password
	- name
	- lastname
	- position
	- email
	- phone
methods:
	- create_user
	- get_user
	- update_user

----------

from typing import  Dict
from pydantic import BaseModel

class UserInDB(BaseModel):
	username: str
	password: str
	name: str
	lastname: str
	position: str
	email: str
	phone: int

database_users = Dict[str, UserInDB]

database_users = {
	"johnyB": UserInDB(**{"username" : "johnyB",
				"password" : "awesome",
                          	"name" : "Johnny",
                          	"lastname" : "Bravo",
                          	"position" : "manager",
                          	"email" : "johnnybgood@cn.com",
                          	"phone" : 1419972704}),
}

def create_user()

def get_user(username: str):
    if username in database_users.keys():
        return database_users[lastname] + ", " + database_users[name] + "\n" + database_users[position]
    else:
        return None

def update_user(user_in_db: UserInDB):
    database_users[user_in_db.username] = user_in_db
    return user_in_db


